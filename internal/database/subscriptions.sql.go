// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: subscriptions.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createSubscription = `-- name: CreateSubscription :one
INSERT INTO subscriptions (id, created_at, updated_at, user_id, feed_id)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, created_at, updated_at, user_id, feed_id
`

type CreateSubscriptionParams struct {
	ID        uuid.UUID `json:"id"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
	UserID    uuid.UUID `json:"user_id"`
	FeedID    uuid.UUID `json:"feed_id"`
}

func (q *Queries) CreateSubscription(ctx context.Context, arg CreateSubscriptionParams) (Subscription, error) {
	row := q.db.QueryRowContext(ctx, createSubscription,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UserID,
		arg.FeedID,
	)
	var i Subscription
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.FeedID,
	)
	return i, err
}

const deleteSubscription = `-- name: DeleteSubscription :execrows
DELETE FROM subscriptions WHERE user_id = $1 AND feed_id = $2
`

type DeleteSubscriptionParams struct {
	UserID uuid.UUID `json:"user_id"`
	FeedID uuid.UUID `json:"feed_id"`
}

func (q *Queries) DeleteSubscription(ctx context.Context, arg DeleteSubscriptionParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteSubscription, arg.UserID, arg.FeedID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getActiveSubscriptions = `-- name: GetActiveSubscriptions :many
SELECT
    s.id, s.created_at, s.updated_at, s.user_id, s.feed_id,
    f.id, f.created_at, f.updated_at, f.name, f.url, f.user_id, f.fetched_at
FROM
    subscriptions s
    INNER JOIN feeds f ON f.id = s.feed_id
WHERE
    s.user_id = $1
`

type GetActiveSubscriptionsRow struct {
	ID        uuid.UUID `json:"id"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
	UserID    uuid.UUID `json:"user_id"`
	FeedID    uuid.UUID `json:"feed_id"`
	Feed      Feed      `json:"feed"`
}

func (q *Queries) GetActiveSubscriptions(ctx context.Context, userID uuid.UUID) ([]GetActiveSubscriptionsRow, error) {
	rows, err := q.db.QueryContext(ctx, getActiveSubscriptions, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetActiveSubscriptionsRow
	for rows.Next() {
		var i GetActiveSubscriptionsRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
			&i.FeedID,
			&i.Feed.ID,
			&i.Feed.CreatedAt,
			&i.Feed.UpdatedAt,
			&i.Feed.Name,
			&i.Feed.URL,
			&i.Feed.UserID,
			&i.Feed.FetchedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
