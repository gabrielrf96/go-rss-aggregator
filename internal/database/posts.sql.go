// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: posts.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createPost = `-- name: CreatePost :one
INSERT INTO posts (
    id,
    created_at,
    updated_at,
    published_at,
    title,
    description,
    url,
    feed_id
)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, created_at, updated_at, published_at, title, description, url, feed_id
`

type CreatePostParams struct {
	ID          uuid.UUID      `json:"id"`
	CreatedAt   time.Time      `json:"created_at"`
	UpdatedAt   time.Time      `json:"updated_at"`
	PublishedAt time.Time      `json:"published_at"`
	Title       string         `json:"title"`
	Description sql.NullString `json:"description"`
	URL         string         `json:"url"`
	FeedID      uuid.UUID      `json:"feed_id"`
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, createPost,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.PublishedAt,
		arg.Title,
		arg.Description,
		arg.URL,
		arg.FeedID,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PublishedAt,
		&i.Title,
		&i.Description,
		&i.URL,
		&i.FeedID,
	)
	return i, err
}

const getPostsForUser = `-- name: GetPostsForUser :many
SELECT
    p.id, p.created_at, p.updated_at, p.published_at, p.title, p.description, p.url, p.feed_id,
    f.id, f.created_at, f.updated_at, f.name, f.url, f.user_id, f.fetched_at
FROM
    subscriptions s
    INNER JOIN posts p ON p.feed_id = s.feed_id
    INNER JOIN feeds f ON f.id = s.feed_id
WHERE
    s.user_id = $1
ORDER BY
    p.published_at DESC
LIMIT $2
`

type GetPostsForUserParams struct {
	UserID uuid.UUID `json:"user_id"`
	Limit  int32     `json:"limit"`
}

type GetPostsForUserRow struct {
	ID          uuid.UUID      `json:"id"`
	CreatedAt   time.Time      `json:"created_at"`
	UpdatedAt   time.Time      `json:"updated_at"`
	PublishedAt time.Time      `json:"published_at"`
	Title       string         `json:"title"`
	Description sql.NullString `json:"description"`
	URL         string         `json:"url"`
	FeedID      uuid.UUID      `json:"feed_id"`
	Feed        Feed           `json:"feed"`
}

func (q *Queries) GetPostsForUser(ctx context.Context, arg GetPostsForUserParams) ([]GetPostsForUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getPostsForUser, arg.UserID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPostsForUserRow
	for rows.Next() {
		var i GetPostsForUserRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.PublishedAt,
			&i.Title,
			&i.Description,
			&i.URL,
			&i.FeedID,
			&i.Feed.ID,
			&i.Feed.CreatedAt,
			&i.Feed.UpdatedAt,
			&i.Feed.Name,
			&i.Feed.URL,
			&i.Feed.UserID,
			&i.Feed.FetchedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
